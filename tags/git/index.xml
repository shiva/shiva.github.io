<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on Reflections</title>
    <link>http://blog.shiv.me/tags/git/</link>
    <description>Recent content in git on Reflections</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright 2016 &amp;copy; Shivanand Velmurugan</copyright>
    <lastBuildDate>Thu, 29 Dec 2016 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.shiv.me/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Working with large C codebases</title>
      <link>http://blog.shiv.me/2016/12/29/working-with-large-c-codebases/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.shiv.me/2016/12/29/working-with-large-c-codebases/</guid>
      <description>Searching for symbols The product that I work on, has over 22 million lines of source &amp;ndash; most of it a nightmare. I use vim as my editor of choice 1. Both cscope and ctags (integrated into vim), allow me to quickly move between files and lookup definitions of symbols, and help in understanding the challenge-du-jour.
Throw in fuzzy find capabilities of the most awesome Ctrl+p plugin, and vim becomes the best &amp;lsquo;IDE&amp;rsquo; out there!</description>
    </item>
    
    <item>
      <title>Getting git status on multiple directories</title>
      <link>http://blog.shiv.me/2014/03/31/getting-git-status-on-multiple-directories/</link>
      <pubDate>Mon, 31 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.shiv.me/2014/03/31/getting-git-status-on-multiple-directories/</guid>
      <description>At any given time, I have a handful of git repositories that I work on. While typing in the command-line is great, it getting tiring when you have a several directories that you have to manually change to and check. The &amp;ldquo;git status&amp;rdquo; command can take the git repo and the working directory as input. That, and a little bash programming to the rescue. The following command, executes git status in every subdirectory that is a git repository.</description>
    </item>
    
    <item>
      <title>Beautiful git logs and listing files in a commit</title>
      <link>http://blog.shiv.me/2012/09/26/beautiful-git-logs-and-listing-files-in-a-commit/</link>
      <pubDate>Wed, 26 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.shiv.me/2012/09/26/beautiful-git-logs-and-listing-files-in-a-commit/</guid>
      <description>Working with git is fun. However, it is easy to get tired of the log list of parameters one has to use to very often. Git aliases are a great way to deal with this.
 For instance, the standard git log, it pretty much useless in any large project, where there are several hundred commits in a day. Most often, the commit you are looking for in probably several pages deep.</description>
    </item>
    
  </channel>
</rss>
