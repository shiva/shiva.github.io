<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bash on shiv.me</title>
    <link>http://blog.shiv.me/tags/bash/</link>
    <description>Recent content in Bash on shiv.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright 2016 &amp;copy; Shivanand Velmurugan</copyright>
    <lastBuildDate>Thu, 29 Dec 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://blog.shiv.me/tags/bash/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Useful bash aliases</title>
      <link>http://blog.shiv.me/2016/12/29/useful-bash-aliases/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.shiv.me/2016/12/29/useful-bash-aliases/</guid>
      <description>&lt;p&gt;For the past 9 years, I have written C code almost every working day. I primarily use vim as my editor of choice (for about 20 years now). The product that I work on has over 22 million lines of source &amp;ndash; most of it a nightmare. Both cscope and ctags (integrated into vim), allow me to quickly move between files and lookup definitions of symbols, and help in understand the challenge at hand.&lt;/p&gt;

&lt;p&gt;However, such large code bases result in very large indexes. A fully indexed ctags file is several gigabytes. Searching for a symbols definition in such situations slows vim down quite substantially. It is vital to isolate and index a controlled portion of the source &amp;ndash; the part that I am interested in today.&lt;/p&gt;

&lt;p&gt;I use the following aliases to build tags files and cscope databases as I need.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/shiva/89240cdece79f84867f0feeb9d73f1f5.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Throw is the fuzzy find capabilities of the most awesome &lt;a href=&#34;https://github.com/kien/ctrlp.vim&#34;&gt;Ctrl+p plugin&lt;/a&gt;, and vim becomes the best &amp;lsquo;IDE&amp;rsquo; out there!&lt;/p&gt;

&lt;p&gt;Another frequently used command is remove-whitespace. I like to strip trailing whitespace, since it is quite ugly, off-putting when viewing diffs between two versions of a file, or when reading git-diffs and patches. It is a lot more powerful when combined with the ability to list all files that were changed in the last commit. The following command, fixes trailing white-spaces in all of the files that were changes in the last commit.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for f in `git show --name-only --pretty=&amp;quot;&amp;quot;`; do echo $f; remove-whitespace $f;  done
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Getting git status on multiple directories</title>
      <link>http://blog.shiv.me/2014/03/31/getting-git-status-on-multiple-directories/</link>
      <pubDate>Mon, 31 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.shiv.me/2014/03/31/getting-git-status-on-multiple-directories/</guid>
      <description>&lt;p&gt;At any given time, I have a handful of git repositories that I work on. While typing in the command-line is great, it getting tiring when you have a several directories that you have to manually change to and check. The &amp;ldquo;git status&amp;rdquo; command can take the git repo and the working directory as input. That, and a little bash programming to the rescue.
The following command, executes git status in every subdirectory that is a git repository.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;for d in `find . -name &amp;quot;.git&amp;quot;`; do 
echo &amp;quot;processing $d ...&amp;quot;; 
git --git-dir=$d --work-tree=$d/.. status; 
done
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>